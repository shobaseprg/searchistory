rules_version = '2';

service cloud.firestore {

  function isAuth(){
    return request.auth != null
  }
  function myUID(){
    return request.auth.uid
  }
  function incomingData(){
    return request.resource.data
  }
  function existingData(){
    return resource.data
  }
  function isAvailableCreateFields(fieldList){
    return incomingData().keys().hasOnly(fieldList)
  }
  function isAvailableUpdateFields(FieldList){
    return incomingData().diff(existingData()).affectedKeys().hasOnly(FieldList)
  }
  function getParentTopic(database,documentID){
    return get(/databases/$(database)/documents/topics/$(documentID))
  }
  match /databases/{database}/documents {
    match /users/{userID} {
      allow get:if isAuth()
      allow list:if true;
      allow create:if isAuth() &&
                      isAvailableCreateFields(["name","uid"]) &&
                      userID == myUID() &&
                      incomingData().name is string &&
                      incomingData().name.size() < 31 &&
                      incomingData().name.size() > 2 &&
                      incomingData().uid == myUID();
      allow update:if isAuth() &&
                      isAvailableUpdateFields(['name']) &&
                      userID == myUID() &&
                      incomingData().name is string &&
                      incomingData().name.size() < 31 &&
                      incomingData().name.size() > 2 ;
    }
    // private_users
    match /private_users/{userID} {
      allow get:if isAuth() &&
                    userID == myUID();
      allow create:if isAuth() &&
                      isAvailableCreateFields(["uid","member_uid_list"]) &&
                      userID == myUID() &&
                      incomingData().uid == myUID();
      allow update:if isAuth() &&
                      isAvailableUpdateFields(["member_uid_list"]) &&
                      userID == myUID();
    }
    // topics
    match /topics/{documentID} {
      allow get:if isAuth() &&
                    myUID() in existingData().authorized_uid_list;
      allow list:if isAuth() &&
                    myUID() in existingData().authorized_uid_list;
      allow create:if isAuth() &&
                      isAvailableCreateFields(["title","content","authorized_uid_list","files","created_at","updated_at","status","uid","doc_id","history_list"]) &&
                      incomingData().uid == myUID() &&
                      incomingData().title is string &&
                      incomingData().title.size() < 101 &&
                      incomingData().title.size() > 0 &&
                      incomingData().content is string &&
                      incomingData().content.size() < 10001 &&
                      incomingData().content.size() > 0 &&
                      incomingData().authorized_uid_list is list &&
                      myUID() in incomingData().authorized_uid_list &&
                      incomingData().files is list &&
                      incomingData().updated_at is timestamp &&
                      // incomingData().status == "pending" &&
                      incomingData().status == 0 &&
                      incomingData().doc_id == documentID &&
                      incomingData().created_at is timestamp &&
                      incomingData().history_list is list;
      allow update:if isAuth() &&
                      existingData().uid == myUID() &&
                      myUID() in incomingData().authorized_uid_list &&
                      isAvailableUpdateFields(["title","content","authorized_uid_list","files","updated_at","status"]) &&
                      incomingData().title is string &&
                      incomingData().title.size() < 101 &&
                      incomingData().title.size() > 0 &&
                      incomingData().content is string &&
                      incomingData().content.size() < 10001 &&
                      incomingData().content.size() > 0 &&
                      incomingData().authorized_uid_list is list &&
                      myUID() in incomingData().authorized_uid_list &&
                      incomingData().files is list &&
                      incomingData().updated_at is timestamp &&
                      // incomingData().status is string;
                      incomingData().status is number;
      allow delete:if isAuth() &&
                      existingData().uid == myUID();
      // topics/histories
      match /histories/{historyDocumentID}{
        allow list:if isAuth() &&
                        myUID() in getParentTopic(database,documentID).data.authorized_uid_list
        allow create:if isAuth() &&
                        myUID() in getParentTopic(database,documentID).data.authorized_uid_list &&
                        isAvailableCreateFields(["url","title","content","status","files","updated_at","created_at","doc_id","uid","topic_doc_id"]) &&
                        incomingData().url is string &&
                        incomingData().url.size() < 501 &&
                        incomingData().url.size() > 0 &&
                        incomingData().title is string &&
                        incomingData().title.size() < 301 &&
                        incomingData().content is string &&
                        incomingData().content.size() < 10001 &&
                        incomingData().content.size() > 0 &&
                        incomingData().status == "pending" &&
                        incomingData().files is list &&
                        incomingData().updated_at is timestamp &&
                        incomingData().created_at is timestamp &&
                        incomingData().doc_id == historyDocumentID &&
                        incomingData().uid == myUID() &&
                        incomingData().topic_doc_id == documentID;
        allow update:if isAuth() &&
                        myUID() in getParentTopic(database,documentID).data.authorized_uid_list &&
                        isAvailableUpdateFields(["title","content","status","files","updated_at"]) &&
                        incomingData().title is string &&
                        incomingData().title.size() < 301 &&
                        incomingData().content is string &&
                        incomingData().content.size() < 10001 &&
                        incomingData().content.size() > 0 &&
                        incomingData().status is string &&
                        incomingData().files is list &&
                        incomingData().updated_at is timestamp;
        allow delete:if isAuth() &&
                        myUID() == getParentTopic(database,documentID).data.uid ||
                        myUID() == existingData().uid;
      }
    }
  }
}
